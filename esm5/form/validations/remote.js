import { of } from 'rxjs';
import { catchError, delay, map, switchMap } from 'rxjs/operators';
import { hasValue } from '../../utils/check';
export function alreadyExist(http, url, requestBody) {
    return function (control) {
        return of(control.value).pipe(delay(1000), switchMap(function (value) {
            if (hasValue(value)) {
                requestBody.Value = value;
                return http.post(url, requestBody).pipe(map(function () { return ({ alreadyExist: true }); }), catchError(function () { return of(null); }));
            }
            return of(null);
        }));
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNlcnNvbC9uZ3gvIiwic291cmNlcyI6WyJmb3JtL3ZhbGlkYXRpb25zL3JlbW90ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNuRSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFTN0MsTUFBTSxVQUFVLFlBQVksQ0FBQyxJQUFnQixFQUFFLEdBQVcsRUFBRSxXQUFnQztJQUN4RixPQUFPLFVBQUMsT0FBb0I7UUFFeEIsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FDekIsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUNYLFNBQVMsQ0FBQyxVQUFDLEtBQUs7WUFDWixJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBRTtnQkFFakIsV0FBVyxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7Z0JBRTFCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUNyQyxHQUFHLENBQUMsY0FBTSxPQUFBLENBQUMsRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxFQUNuQyxVQUFVLENBQUMsY0FBTSxPQUFBLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBUixDQUFRLENBQUMsQ0FDM0IsQ0FBQzthQUNMO1lBRUQsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUNKLENBQUMsQ0FBQztJQUNQLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBBc3luY1ZhbGlkYXRvckZuLCBGb3JtQ29udHJvbCwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgY2F0Y2hFcnJvciwgZGVsYXksIG1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBoYXNWYWx1ZSB9IGZyb20gJy4uLy4uL3V0aWxzL2NoZWNrJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgQmFzZVZhbGlkYXRpb25Nb2RlbCB7XHJcbiAgICBNb2RlbDogc3RyaW5nO1xyXG4gICAgRmllbGQ6IHN0cmluZztcclxuICAgIElkPzogc3RyaW5nIHwgbnVtYmVyO1xyXG4gICAgVmFsdWU/OiBhbnk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBhbHJlYWR5RXhpc3QoaHR0cDogSHR0cENsaWVudCwgdXJsOiBzdHJpbmcsIHJlcXVlc3RCb2R5OiBCYXNlVmFsaWRhdGlvbk1vZGVsKTogQXN5bmNWYWxpZGF0b3JGbiB7XHJcbiAgICByZXR1cm4gKGNvbnRyb2w6IEZvcm1Db250cm9sKTogT2JzZXJ2YWJsZTxWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbD4gPT4ge1xyXG5cclxuICAgICAgICByZXR1cm4gb2YoY29udHJvbC52YWx1ZSkucGlwZShcclxuICAgICAgICAgICAgZGVsYXkoMTAwMCksXHJcbiAgICAgICAgICAgIHN3aXRjaE1hcCgodmFsdWUpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChoYXNWYWx1ZSh2YWx1ZSkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdEJvZHkuVmFsdWUgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh0dHAucG9zdCh1cmwsIHJlcXVlc3RCb2R5KS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgbWFwKCgpID0+ICh7IGFscmVhZHlFeGlzdDogdHJ1ZSB9KSksXHJcbiAgICAgICAgICAgICAgICAgICAgICBjYXRjaEVycm9yKCgpID0+IG9mKG51bGwpKVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKG51bGwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgKSk7XHJcbiAgICB9O1xyXG59XHJcbiJdfQ==