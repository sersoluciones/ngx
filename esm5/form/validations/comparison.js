import { hasValue } from '../../utils/check';
export function lowerThan(BasePathField, TargetPathField) {
    return function (fg) {
        var base = fg.get(BasePathField);
        var target = fg.get(TargetPathField);
        if (base.value < target.value) {
            if (hasValue(target.errors)) {
                delete base.errors.lowerThan;
                if (hasValue(base.errors)) {
                    base.setErrors(base.errors);
                }
                else {
                    base.setErrors(null);
                }
            }
            else {
                base.setErrors(null);
            }
        }
        else {
            if (hasValue(base.errors)) {
                base.errors.lowerThan = true;
                base.setErrors(base.errors);
            }
            else {
                base.setErrors({
                    lowerThan: true
                });
            }
        }
        return null;
    };
}
export function lowerOrEqualThan(BasePathField, TargetPathField) {
    return function (fg) {
        var base = fg.get(BasePathField);
        var target = fg.get(TargetPathField);
        if (base.value <= target.value) {
            if (hasValue(target.errors)) {
                delete base.errors.lowerOrEqualThan;
                if (hasValue(base.errors)) {
                    base.setErrors(base.errors);
                }
                else {
                    base.setErrors(null);
                }
            }
            else {
                base.setErrors(null);
            }
        }
        else {
            if (hasValue(base.errors)) {
                base.errors.lowerOrEqualThan = true;
                base.setErrors(base.errors);
            }
            else {
                base.setErrors({
                    lowerOrEqualThan: true
                });
            }
        }
        return null;
    };
}
export function greaterThan(BasePathField, TargetPathField) {
    return function (fg) {
        var base = fg.get(BasePathField);
        var target = fg.get(TargetPathField);
        if (base.value > target.value) {
            if (hasValue(target.errors)) {
                delete base.errors.greaterThan;
                if (hasValue(base.errors)) {
                    base.setErrors(base.errors);
                }
                else {
                    base.setErrors(null);
                }
            }
            else {
                base.setErrors(null);
            }
        }
        else {
            if (hasValue(base.errors)) {
                base.errors.greaterThan = true;
                base.setErrors(base.errors);
            }
            else {
                base.setErrors({
                    greaterThan: true
                });
            }
        }
        return null;
    };
}
export function greaterOrEqualThan(BasePathField, TargetPathField) {
    return function (fg) {
        var base = fg.get(BasePathField);
        var target = fg.get(TargetPathField);
        if (base.value >= target.value) {
            if (hasValue(target.errors)) {
                delete base.errors.greaterOrEqualThan;
                if (hasValue(base.errors)) {
                    base.setErrors(base.errors);
                }
                else {
                    base.setErrors(null);
                }
            }
            else {
                base.setErrors(null);
            }
        }
        else {
            if (hasValue(base.errors)) {
                base.errors.greaterOrEqualThan = true;
                base.setErrors(base.errors);
            }
            else {
                base.setErrors({
                    greaterOrEqualThan: true
                });
            }
        }
        return null;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcGFyaXNvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZXJzb2wvbmd4LyIsInNvdXJjZXMiOlsiZm9ybS92YWxpZGF0aW9ucy9jb21wYXJpc29uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUU3QyxNQUFNLFVBQVUsU0FBUyxDQUFDLGFBQXFCLEVBQUUsZUFBdUI7SUFDcEUsT0FBTyxVQUFDLEVBQWE7UUFFakIsSUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNuQyxJQUFNLE1BQU0sR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxDQUFDO1FBRXZDLElBQUksSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFO1lBQzNCLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDekIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQztnQkFFN0IsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDL0I7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDeEI7YUFDSjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3hCO1NBRUo7YUFBTTtZQUVILElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO2dCQUM3QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUMvQjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsU0FBUyxD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QyxFQUFhO1FBRWpCLElBQU0sSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDbkMsSUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUV2QyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLEtBQUssRUFBRTtZQUM1QixJQUFJLFFBQVEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQztnQkFFdEMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO29CQUN2QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDL0I7cUJBQU07b0JBQ0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDeEI7YUFDSjtpQkFBTTtnQkFDSCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3hCO1NBRUo7YUFBTTtZQUVILElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQy9CO2lCQUFNO2dCQUNILElBQUksQ0FBQyxTQUFTLENBQUM7b0JBQ1gsa0JBQWtCLEVBQUUsSUFBSTtpQkFDM0IsQ0FBQyxDQUFDO2FBQ047U0FDSjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtR3JvdXAsIFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBoYXNWYWx1ZSB9IGZyb20gJy4uLy4uL3V0aWxzL2NoZWNrJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBsb3dlclRoYW4oQmFzZVBhdGhGaWVsZDogc3RyaW5nLCBUYXJnZXRQYXRoRmllbGQ6IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiAoZmc6IEZvcm1Hcm91cCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcclxuXHJcbiAgICAgICAgY29uc3QgYmFzZSA9IGZnLmdldChCYXNlUGF0aEZpZWxkKTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBmZy5nZXQoVGFyZ2V0UGF0aEZpZWxkKTtcclxuXHJcbiAgICAgICAgaWYgKGJhc2UudmFsdWUgPCB0YXJnZXQudmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKHRhcmdldC5lcnJvcnMpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYmFzZS5lcnJvcnMubG93ZXJUaGFuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChoYXNWYWx1ZShiYXNlLmVycm9ycykpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyhiYXNlLmVycm9ycyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhc2Uuc2V0RXJyb3JzKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYmFzZS5zZXRFcnJvcnMobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZShiYXNlLmVycm9ycykpIHtcclxuICAgICAgICAgICAgICAgIGJhc2UuZXJyb3JzLmxvd2VyVGhhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyhiYXNlLmVycm9ycyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJUaGFuOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxvd2VyT3JFcXVhbFRoYW4oQmFzZVBhdGhGaWVsZDogc3RyaW5nLCBUYXJnZXRQYXRoRmllbGQ6IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcclxuICAgIHJldHVybiAoZmc6IEZvcm1Hcm91cCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcclxuXHJcbiAgICAgICAgY29uc3QgYmFzZSA9IGZnLmdldChCYXNlUGF0aEZpZWxkKTtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBmZy5nZXQoVGFyZ2V0UGF0aEZpZWxkKTtcclxuXHJcbiAgICAgICAgaWYgKGJhc2UudmFsdWUgPD0gdGFyZ2V0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZSh0YXJnZXQuZXJyb3JzKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGJhc2UuZXJyb3JzLmxvd2VyT3JFcXVhbFRoYW47XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKGJhc2UuZXJyb3JzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhc2Uuc2V0RXJyb3JzKGJhc2UuZXJyb3JzKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFzZS5zZXRFcnJvcnMobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyhudWxsKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKGJhc2UuZXJyb3JzKSkge1xyXG4gICAgICAgICAgICAgICAgYmFzZS5lcnJvcnMubG93ZXJPckVxdWFsVGhhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyhiYXNlLmVycm9ycyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyh7XHJcbiAgICAgICAgICAgICAgICAgICAgbG93ZXJPckVxdWFsVGhhbjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdyZWF0ZXJUaGFuKEJhc2VQYXRoRmllbGQ6IHN0cmluZywgVGFyZ2V0UGF0aEZpZWxkOiBzdHJpbmcpOiBWYWxpZGF0b3JGbiB7XHJcbiAgICByZXR1cm4gKGZnOiBGb3JtR3JvdXApOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XHJcblxyXG4gICAgICAgIGNvbnN0IGJhc2UgPSBmZy5nZXQoQmFzZVBhdGhGaWVsZCk7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZmcuZ2V0KFRhcmdldFBhdGhGaWVsZCk7XHJcblxyXG4gICAgICAgIGlmIChiYXNlLnZhbHVlID4gdGFyZ2V0LnZhbHVlKSB7XHJcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZSh0YXJnZXQuZXJyb3JzKSkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIGJhc2UuZXJyb3JzLmdyZWF0ZXJUaGFuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChoYXNWYWx1ZShiYXNlLmVycm9ycykpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyhiYXNlLmVycm9ycyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhc2Uuc2V0RXJyb3JzKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYmFzZS5zZXRFcnJvcnMobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZShiYXNlLmVycm9ycykpIHtcclxuICAgICAgICAgICAgICAgIGJhc2UuZXJyb3JzLmdyZWF0ZXJUaGFuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGJhc2Uuc2V0RXJyb3JzKGJhc2UuZXJyb3JzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGJhc2Uuc2V0RXJyb3JzKHtcclxuICAgICAgICAgICAgICAgICAgICBncmVhdGVyVGhhbjogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdyZWF0ZXJPckVxdWFsVGhhbihCYXNlUGF0aEZpZWxkOiBzdHJpbmcsIFRhcmdldFBhdGhGaWVsZDogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgcmV0dXJuIChmZzogRm9ybUdyb3VwKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xyXG5cclxuICAgICAgICBjb25zdCBiYXNlID0gZmcuZ2V0KEJhc2VQYXRoRmllbGQpO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGZnLmdldChUYXJnZXRQYXRoRmllbGQpO1xyXG5cclxuICAgICAgICBpZiAoYmFzZS52YWx1ZSA+PSB0YXJnZXQudmFsdWUpIHtcclxuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKHRhcmdldC5lcnJvcnMpKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgYmFzZS5lcnJvcnMuZ3JlYXRlck9yRXF1YWxUaGFuO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChoYXNWYWx1ZShiYXNlLmVycm9ycykpIHtcclxuICAgICAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyhiYXNlLmVycm9ycyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhc2Uuc2V0RXJyb3JzKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYmFzZS5zZXRFcnJvcnMobnVsbCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChoYXNWYWx1ZShiYXNlLmVycm9ycykpIHtcclxuICAgICAgICAgICAgICAgIGJhc2UuZXJyb3JzLmdyZWF0ZXJPckVxdWFsVGhhbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyhiYXNlLmVycm9ycyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBiYXNlLnNldEVycm9ycyh7XHJcbiAgICAgICAgICAgICAgICAgICAgZ3JlYXRlck9yRXF1YWxUaGFuOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9O1xyXG59XHJcbiJdfQ==