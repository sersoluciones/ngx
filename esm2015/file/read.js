import { Observable } from 'rxjs';
/**
 * Read the content of a File or Blob using the FileReader interface.
 * This is an async interface so it makes sense to handle it with Rx.
 * @param File | Blob
 */
export function readAsArrayBuffer(blob) {
    return new Observable((obs) => {
        if (!(blob instanceof Blob)) {
            obs.error(new Error('`blob` must be an instance of File or Blob.'));
            return;
        }
        const reader = new FileReader();
        reader.onerror = err => obs.error(err);
        reader.onabort = err => obs.error(err);
        reader.onload = () => obs.next(reader.result);
        reader.onloadend = () => obs.complete();
        reader.readAsArrayBuffer(blob);
    });
}
/**
 * Read the content of a File or Blob using the FileReader interface.
 * This is an async interface so it makes sense to handle it with Rx.
 * @param File | Blob
 */
export function readAsDataURL(blob) {
    return new Observable((obs) => {
        if (!(blob instanceof Blob)) {
            obs.error(new Error('`blob` must be an instance of File or Blob.'));
            return;
        }
        const reader = new FileReader();
        reader.onerror = err => obs.error(err);
        reader.onabort = err => obs.error(err);
        reader.onload = () => obs.next(reader.result);
        reader.onloadend = () => obs.complete();
        reader.readAsDataURL(blob);
    });
}
/**
 * @description Get file type based on header info
 * @param arrayBuffer Result of FileReader.readAsArrayBuffer()
 */
export function getFileType(arrayBuffer) {
    const arr = (new Uint8Array(arrayBuffer)).subarray(0, 4);
    let header = '';
    for (const i of arr) {
        header += i.toString(16);
    }
    console.log('Header file: ', header);
    switch (header) {
        case '89504e47':
            return 'png';
        case '47494638':
            return 'gif';
        case 'ffd8ffe0':
        case 'ffd8ffe1':
        case 'ffd8ffe2':
        case 'ffd8ffe3':
        case 'ffd8ffe8':
            return 'jpeg';
        case '25504446':
            return 'ia';
        case '504b34':
            return 'xlsx';
        case '25504446':
            return 'pdf';
        default:
            return 'unknown';
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVhZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BzZXJzb2wvbmd4LyIsInNvdXJjZXMiOlsiZmlsZS9yZWFkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFbEM7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FBQyxJQUFVO0lBRXhDLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxHQUFRLEVBQVEsRUFBRTtRQUNyQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksSUFBSSxDQUFDLEVBQUU7WUFDekIsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLENBQUM7WUFDcEUsT0FBTztTQUNWO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUVoQyxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXhDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLGFBQWEsQ0FBQyxJQUFVO0lBRXBDLE9BQU8sSUFBSSxVQUFVLENBQUMsQ0FBQyxHQUFRLEVBQVEsRUFBRTtRQUNyQyxJQUFJLENBQUMsQ0FBQyxJQUFJLFlBQVksSUFBSSxDQUFDLEVBQUU7WUFDekIsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyw2Q0FBNkMsQ0FBQyxDQUFDLENBQUM7WUFDcEUsT0FBTztTQUNWO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUVoQyxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsT0FBTyxHQUFHLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN2QyxNQUFNLENBQUMsTUFBTSxHQUFHLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlDLE1BQU0sQ0FBQyxTQUFTLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRXhDLE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0IsQ0FBQyxDQUFDLENBQUM7QUFDUCxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFdBQVcsQ0FBQyxXQUF3QjtJQUVoRCxNQUFNLEdBQUcsR0FBRyxDQUFDLElBQUksVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUV6RCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUM7SUFDaEIsS0FBSyxNQUFNLENBQUMsSUFBSSxHQUFHLEVBQUU7UUFDakIsTUFBTSxJQUFJLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7S0FDNUI7SUFFRCxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUVyQyxRQUFRLE1BQU0sRUFBRTtRQUNaLEtBQUssVUFBVTtZQUNYLE9BQU8sS0FBSyxDQUFDO1FBRWpCLEtBQUssVUFBVTtZQUNYLE9BQU8sS0FBSyxDQUFDO1FBRWpCLEtBQUssVUFBVSxDQUFDO1FBQ2hCLEtBQUssVUFBVSxDQUFDO1FBQ2hCLEtBQUssVUFBVSxDQUFDO1FBQ2hCLEtBQUssVUFBVSxDQUFDO1FBQ2hCLEtBQUssVUFBVTtZQUNYLE9BQU8sTUFBTSxDQUFDO1FBRWxCLEtBQUssVUFBVTtZQUNYLE9BQU8sSUFBSSxDQUFDO1FBRWhCLEtBQUssUUFBUTtZQUNULE9BQU8sTUFBTSxDQUFDO1FBRWxCLEtBQUssVUFBVTtZQUNYLE9BQU8sS0FBSyxDQUFDO1FBRWpCO1lBQ0ksT0FBTyxTQUFTLENBQUM7S0FDeEI7QUFDTCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuLyoqXHJcbiAqIFJlYWQgdGhlIGNvbnRlbnQgb2YgYSBGaWxlIG9yIEJsb2IgdXNpbmcgdGhlIEZpbGVSZWFkZXIgaW50ZXJmYWNlLlxyXG4gKiBUaGlzIGlzIGFuIGFzeW5jIGludGVyZmFjZSBzbyBpdCBtYWtlcyBzZW5zZSB0byBoYW5kbGUgaXQgd2l0aCBSeC5cclxuICogQHBhcmFtIEZpbGUgfCBCbG9iXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVhZEFzQXJyYXlCdWZmZXIoYmxvYjogQmxvYik6IE9ic2VydmFibGU8YW55PiB7XHJcblxyXG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKChvYnM6IGFueSk6IHZvaWQgPT4ge1xyXG4gICAgICAgIGlmICghKGJsb2IgaW5zdGFuY2VvZiBCbG9iKSkge1xyXG4gICAgICAgICAgICBvYnMuZXJyb3IobmV3IEVycm9yKCdgYmxvYmAgbXVzdCBiZSBhbiBpbnN0YW5jZSBvZiBGaWxlIG9yIEJsb2IuJykpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG5cclxuICAgICAgICByZWFkZXIub25lcnJvciA9IGVyciA9PiBvYnMuZXJyb3IoZXJyKTtcclxuICAgICAgICByZWFkZXIub25hYm9ydCA9IGVyciA9PiBvYnMuZXJyb3IoZXJyKTtcclxuICAgICAgICByZWFkZXIub25sb2FkID0gKCkgPT4gb2JzLm5leHQocmVhZGVyLnJlc3VsdCk7XHJcbiAgICAgICAgcmVhZGVyLm9ubG9hZGVuZCA9ICgpID0+IG9icy5jb21wbGV0ZSgpO1xyXG5cclxuICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XHJcbiAgICB9KTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlYWQgdGhlIGNvbnRlbnQgb2YgYSBGaWxlIG9yIEJsb2IgdXNpbmcgdGhlIEZpbGVSZWFkZXIgaW50ZXJmYWNlLlxyXG4gKiBUaGlzIGlzIGFuIGFzeW5jIGludGVyZmFjZSBzbyBpdCBtYWtlcyBzZW5zZSB0byBoYW5kbGUgaXQgd2l0aCBSeC5cclxuICogQHBhcmFtIEZpbGUgfCBCbG9iXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gcmVhZEFzRGF0YVVSTChibG9iOiBCbG9iKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoKG9iczogYW55KTogdm9pZCA9PiB7XHJcbiAgICAgICAgaWYgKCEoYmxvYiBpbnN0YW5jZW9mIEJsb2IpKSB7XHJcbiAgICAgICAgICAgIG9icy5lcnJvcihuZXcgRXJyb3IoJ2BibG9iYCBtdXN0IGJlIGFuIGluc3RhbmNlIG9mIEZpbGUgb3IgQmxvYi4nKSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcblxyXG4gICAgICAgIHJlYWRlci5vbmVycm9yID0gZXJyID0+IG9icy5lcnJvcihlcnIpO1xyXG4gICAgICAgIHJlYWRlci5vbmFib3J0ID0gZXJyID0+IG9icy5lcnJvcihlcnIpO1xyXG4gICAgICAgIHJlYWRlci5vbmxvYWQgPSAoKSA9PiBvYnMubmV4dChyZWFkZXIucmVzdWx0KTtcclxuICAgICAgICByZWFkZXIub25sb2FkZW5kID0gKCkgPT4gb2JzLmNvbXBsZXRlKCk7XHJcblxyXG4gICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAZGVzY3JpcHRpb24gR2V0IGZpbGUgdHlwZSBiYXNlZCBvbiBoZWFkZXIgaW5mb1xyXG4gKiBAcGFyYW0gYXJyYXlCdWZmZXIgUmVzdWx0IG9mIEZpbGVSZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoKVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEZpbGVUeXBlKGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlcikge1xyXG5cclxuICAgIGNvbnN0IGFyciA9IChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpLnN1YmFycmF5KDAsIDQpO1xyXG5cclxuICAgIGxldCBoZWFkZXIgPSAnJztcclxuICAgIGZvciAoY29uc3QgaSBvZiBhcnIpIHtcclxuICAgICAgICBoZWFkZXIgKz0gaS50b1N0cmluZygxNik7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coJ0hlYWRlciBmaWxlOiAnLCBoZWFkZXIpO1xyXG5cclxuICAgIHN3aXRjaCAoaGVhZGVyKSB7XHJcbiAgICAgICAgY2FzZSAnODk1MDRlNDcnOlxyXG4gICAgICAgICAgICByZXR1cm4gJ3BuZyc7XHJcblxyXG4gICAgICAgIGNhc2UgJzQ3NDk0NjM4JzpcclxuICAgICAgICAgICAgcmV0dXJuICdnaWYnO1xyXG5cclxuICAgICAgICBjYXNlICdmZmQ4ZmZlMCc6XHJcbiAgICAgICAgY2FzZSAnZmZkOGZmZTEnOlxyXG4gICAgICAgIGNhc2UgJ2ZmZDhmZmUyJzpcclxuICAgICAgICBjYXNlICdmZmQ4ZmZlMyc6XHJcbiAgICAgICAgY2FzZSAnZmZkOGZmZTgnOlxyXG4gICAgICAgICAgICByZXR1cm4gJ2pwZWcnO1xyXG5cclxuICAgICAgICBjYXNlICcyNTUwNDQ0Nic6XHJcbiAgICAgICAgICAgIHJldHVybiAnaWEnO1xyXG5cclxuICAgICAgICBjYXNlICc1MDRiMzQnOlxyXG4gICAgICAgICAgICByZXR1cm4gJ3hsc3gnO1xyXG5cclxuICAgICAgICBjYXNlICcyNTUwNDQ0Nic6XHJcbiAgICAgICAgICAgIHJldHVybiAncGRmJztcclxuXHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgcmV0dXJuICd1bmtub3duJztcclxuICAgIH1cclxufVxyXG4iXX0=