import { greaterOrEqualThan, greaterThan, lowerOrEqualThan, lowerThan } from './comparison';
import { match } from './match';
import { maxFileSize, minFileSize, requiredFileType } from './file';
import { alreadyExist } from './remote';
// @dynamic
/**
 * Validaciones adicionales para Form Control's
 */
export class CustomValidators {
    /**
     * Verifica si los campos proveidos son iguales
     * @param originalPathField Path del campo original
     * @param duplicatePathField Path del campo que deberia ser igual al original
     */
    static match(originalPathField, duplicatePathField) {
        return match(originalPathField, duplicatePathField);
    }
    /**
     * Verifica si un campo es menor a otro
     * @param BasePathField Path del campo que debe ser menor
     * @param TargetPathField Path del campo que deberia ser mayor
     */
    static lowerThan(BasePathField, TargetPathField) {
        return lowerThan(BasePathField, TargetPathField);
    }
    /**
     * Verifica si un campo es menor o igual a otro
     * @param BasePathField Path del campo que debe ser menor o igual
     * @param TargetPathField Path del campo que deberia ser mayor o igual
     */
    static lowerOrEqualThan(BasePathField, TargetPathField) {
        return lowerOrEqualThan(BasePathField, TargetPathField);
    }
    /**
     * Verifica si un campo es mayor a otro
     * @param BasePathField Path del campo que debe ser mayor
     * @param TargetPathField Path del campo que deberia ser menor
     */
    static greaterThan(BasePathField, TargetPathField) {
        return greaterThan(BasePathField, TargetPathField);
    }
    /**
     * Verifica si un campo es mayor o igual a otro
     * @param BasePathField Path del campo que debe ser mayor o igual
     * @param TargetPathField Path del campo que deberia ser menor o igual
     */
    static greaterOrEqualThan(BasePathField, TargetPathField) {
        return greaterOrEqualThan(BasePathField, TargetPathField);
    }
    /**
     * Verifica si el tamaño no excede el tamaño maximo indicado
     * @param size Tamaño en KB, MG ó GB (ejem: 100MB)
     */
    static maxFileSize(size) {
        return maxFileSize(size);
    }
    /**
     * Verifica si el tamaño es mayor el tamaño mínimo indicado
     * @param size Tamaño en KB, MG ó GB (ejem: 100MB)
     */
    static minFileSize(size) {
        return minFileSize(size);
    }
    /**
     * Verifica si el archivo tiene una extensión adminitida por medio de su cabecera
     * @param ext Extensiones admitidas
     */
    static requiredFileType(ext) {
        return requiredFileType(ext);
    }
    /**
     * Verifica si existe dicho valor en la DB si coincide con el modelo y el nombre de campo
     * @param http
     * @param url
     * @param requestBody propiedad Id opcional para excluir de la busqueda un registro
     */
    static alreadyExist(http, url, requestBody) {
        return alreadyExist(http, url, requestBody);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLXZhbGlkYXRvcnMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac2Vyc29sL25neC8iLCJzb3VyY2VzIjpbImZvcm0vdmFsaWRhdGlvbnMvY3VzdG9tLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDNUYsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwRSxPQUFPLEVBQUUsWUFBWSxFQUF1QixNQUFNLFVBQVUsQ0FBQztBQUU3RCxXQUFXO0FBQ1g7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZ0JBQWdCO0lBRXpCOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsS0FBSyxDQUFDLGlCQUF5QixFQUFFLGtCQUEwQjtRQUM5RCxPQUFPLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxhQUFxQixFQUFFLGVBQXVCO1FBQzNELE9BQU8sU0FBUyxDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFxQixFQUFFLGVBQXVCO1FBQ2xFLE9BQU8sZ0JBQWdCLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFxQixFQUFFLGVBQXVCO1FBQzdELE9BQU8sV0FBVyxDQUFDLGFBQWEsRUFBRSxlQUFlLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxhQUFxQixFQUFFLGVBQXVCO1FBQ3BFLE9BQU8sa0JBQWtCLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFRDs7O09BR0c7SUFDSCxNQUFNLENBQUMsV0FBVyxDQUFDLElBQVk7UUFDM0IsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBWTtRQUMzQixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEdBQXNCO1FBQzFDLE9BQU8sZ0JBQWdCLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0gsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFnQixFQUFFLEdBQVcsRUFBRSxXQUFnQztRQUMvRSxPQUFPLFlBQVksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZhbGlkYXRpb25FcnJvcnMsIFZhbGlkYXRvckZuLCBGb3JtR3JvdXAsIEZvcm1Db250cm9sLCBBc3luY1ZhbGlkYXRvckZuIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBjYXRjaEVycm9yLCBkZWxheSwgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IGhhc1ZhbHVlIH0gZnJvbSAnLi4vLi4vdXRpbHMvY2hlY2snO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBncmVhdGVyT3JFcXVhbFRoYW4sIGdyZWF0ZXJUaGFuLCBsb3dlck9yRXF1YWxUaGFuLCBsb3dlclRoYW4gfSBmcm9tICcuL2NvbXBhcmlzb24nO1xyXG5pbXBvcnQgeyBtYXRjaCB9IGZyb20gJy4vbWF0Y2gnO1xyXG5pbXBvcnQgeyBtYXhGaWxlU2l6ZSwgbWluRmlsZVNpemUsIHJlcXVpcmVkRmlsZVR5cGUgfSBmcm9tICcuL2ZpbGUnO1xyXG5pbXBvcnQgeyBhbHJlYWR5RXhpc3QsIEJhc2VWYWxpZGF0aW9uTW9kZWwgfSBmcm9tICcuL3JlbW90ZSc7XHJcblxyXG4vLyBAZHluYW1pY1xyXG4vKipcclxuICogVmFsaWRhY2lvbmVzIGFkaWNpb25hbGVzIHBhcmEgRm9ybSBDb250cm9sJ3NcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDdXN0b21WYWxpZGF0b3JzIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFZlcmlmaWNhIHNpIGxvcyBjYW1wb3MgcHJvdmVpZG9zIHNvbiBpZ3VhbGVzXHJcbiAgICAgKiBAcGFyYW0gb3JpZ2luYWxQYXRoRmllbGQgUGF0aCBkZWwgY2FtcG8gb3JpZ2luYWxcclxuICAgICAqIEBwYXJhbSBkdXBsaWNhdGVQYXRoRmllbGQgUGF0aCBkZWwgY2FtcG8gcXVlIGRlYmVyaWEgc2VyIGlndWFsIGFsIG9yaWdpbmFsXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBtYXRjaChvcmlnaW5hbFBhdGhGaWVsZDogc3RyaW5nLCBkdXBsaWNhdGVQYXRoRmllbGQ6IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcclxuICAgICAgICByZXR1cm4gbWF0Y2gob3JpZ2luYWxQYXRoRmllbGQsIGR1cGxpY2F0ZVBhdGhGaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWZXJpZmljYSBzaSB1biBjYW1wbyBlcyBtZW5vciBhIG90cm9cclxuICAgICAqIEBwYXJhbSBCYXNlUGF0aEZpZWxkIFBhdGggZGVsIGNhbXBvIHF1ZSBkZWJlIHNlciBtZW5vclxyXG4gICAgICogQHBhcmFtIFRhcmdldFBhdGhGaWVsZCBQYXRoIGRlbCBjYW1wbyBxdWUgZGViZXJpYSBzZXIgbWF5b3JcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGxvd2VyVGhhbihCYXNlUGF0aEZpZWxkOiBzdHJpbmcsIFRhcmdldFBhdGhGaWVsZDogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgICAgIHJldHVybiBsb3dlclRoYW4oQmFzZVBhdGhGaWVsZCwgVGFyZ2V0UGF0aEZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZlcmlmaWNhIHNpIHVuIGNhbXBvIGVzIG1lbm9yIG8gaWd1YWwgYSBvdHJvXHJcbiAgICAgKiBAcGFyYW0gQmFzZVBhdGhGaWVsZCBQYXRoIGRlbCBjYW1wbyBxdWUgZGViZSBzZXIgbWVub3IgbyBpZ3VhbFxyXG4gICAgICogQHBhcmFtIFRhcmdldFBhdGhGaWVsZCBQYXRoIGRlbCBjYW1wbyBxdWUgZGViZXJpYSBzZXIgbWF5b3IgbyBpZ3VhbFxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgbG93ZXJPckVxdWFsVGhhbihCYXNlUGF0aEZpZWxkOiBzdHJpbmcsIFRhcmdldFBhdGhGaWVsZDogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgICAgIHJldHVybiBsb3dlck9yRXF1YWxUaGFuKEJhc2VQYXRoRmllbGQsIFRhcmdldFBhdGhGaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWZXJpZmljYSBzaSB1biBjYW1wbyBlcyBtYXlvciBhIG90cm9cclxuICAgICAqIEBwYXJhbSBCYXNlUGF0aEZpZWxkIFBhdGggZGVsIGNhbXBvIHF1ZSBkZWJlIHNlciBtYXlvclxyXG4gICAgICogQHBhcmFtIFRhcmdldFBhdGhGaWVsZCBQYXRoIGRlbCBjYW1wbyBxdWUgZGViZXJpYSBzZXIgbWVub3JcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdyZWF0ZXJUaGFuKEJhc2VQYXRoRmllbGQ6IHN0cmluZywgVGFyZ2V0UGF0aEZpZWxkOiBzdHJpbmcpOiBWYWxpZGF0b3JGbiB7XHJcbiAgICAgICAgcmV0dXJuIGdyZWF0ZXJUaGFuKEJhc2VQYXRoRmllbGQsIFRhcmdldFBhdGhGaWVsZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWZXJpZmljYSBzaSB1biBjYW1wbyBlcyBtYXlvciBvIGlndWFsIGEgb3Ryb1xyXG4gICAgICogQHBhcmFtIEJhc2VQYXRoRmllbGQgUGF0aCBkZWwgY2FtcG8gcXVlIGRlYmUgc2VyIG1heW9yIG8gaWd1YWxcclxuICAgICAqIEBwYXJhbSBUYXJnZXRQYXRoRmllbGQgUGF0aCBkZWwgY2FtcG8gcXVlIGRlYmVyaWEgc2VyIG1lbm9yIG8gaWd1YWxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdyZWF0ZXJPckVxdWFsVGhhbihCYXNlUGF0aEZpZWxkOiBzdHJpbmcsIFRhcmdldFBhdGhGaWVsZDogc3RyaW5nKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgICAgIHJldHVybiBncmVhdGVyT3JFcXVhbFRoYW4oQmFzZVBhdGhGaWVsZCwgVGFyZ2V0UGF0aEZpZWxkKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZlcmlmaWNhIHNpIGVsIHRhbWHDsW8gbm8gZXhjZWRlIGVsIHRhbWHDsW8gbWF4aW1vIGluZGljYWRvXHJcbiAgICAgKiBAcGFyYW0gc2l6ZSBUYW1hw7FvIGVuIEtCLCBNRyDDsyBHQiAoZWplbTogMTAwTUIpXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBtYXhGaWxlU2l6ZShzaXplOiBzdHJpbmcpOiBWYWxpZGF0b3JGbiB7XHJcbiAgICAgICAgcmV0dXJuIG1heEZpbGVTaXplKHNpemUpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogVmVyaWZpY2Egc2kgZWwgdGFtYcOxbyBlcyBtYXlvciBlbCB0YW1hw7FvIG3DrW5pbW8gaW5kaWNhZG9cclxuICAgICAqIEBwYXJhbSBzaXplIFRhbWHDsW8gZW4gS0IsIE1HIMOzIEdCIChlamVtOiAxMDBNQilcclxuICAgICAqL1xyXG4gICAgc3RhdGljIG1pbkZpbGVTaXplKHNpemU6IHN0cmluZyk6IFZhbGlkYXRvckZuIHtcclxuICAgICAgICByZXR1cm4gbWluRmlsZVNpemUoc2l6ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBWZXJpZmljYSBzaSBlbCBhcmNoaXZvIHRpZW5lIHVuYSBleHRlbnNpw7NuIGFkbWluaXRpZGEgcG9yIG1lZGlvIGRlIHN1IGNhYmVjZXJhXHJcbiAgICAgKiBAcGFyYW0gZXh0IEV4dGVuc2lvbmVzIGFkbWl0aWRhc1xyXG4gICAgICovXHJcbiAgICBzdGF0aWMgcmVxdWlyZWRGaWxlVHlwZShleHQ6IHN0cmluZyB8IHN0cmluZ1tdKTogQXN5bmNWYWxpZGF0b3JGbiB7XHJcbiAgICAgICAgcmV0dXJuIHJlcXVpcmVkRmlsZVR5cGUoZXh0KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFZlcmlmaWNhIHNpIGV4aXN0ZSBkaWNobyB2YWxvciBlbiBsYSBEQiBzaSBjb2luY2lkZSBjb24gZWwgbW9kZWxvIHkgZWwgbm9tYnJlIGRlIGNhbXBvXHJcbiAgICAgKiBAcGFyYW0gaHR0cFxyXG4gICAgICogQHBhcmFtIHVybFxyXG4gICAgICogQHBhcmFtIHJlcXVlc3RCb2R5IHByb3BpZWRhZCBJZCBvcGNpb25hbCBwYXJhIGV4Y2x1aXIgZGUgbGEgYnVzcXVlZGEgdW4gcmVnaXN0cm9cclxuICAgICAqL1xyXG4gICAgc3RhdGljIGFscmVhZHlFeGlzdChodHRwOiBIdHRwQ2xpZW50LCB1cmw6IHN0cmluZywgcmVxdWVzdEJvZHk6IEJhc2VWYWxpZGF0aW9uTW9kZWwpOiBBc3luY1ZhbGlkYXRvckZuIHtcclxuICAgICAgICByZXR1cm4gYWxyZWFkeUV4aXN0KGh0dHAsIHVybCwgcmVxdWVzdEJvZHkpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=