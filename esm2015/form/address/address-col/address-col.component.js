var AddressColComponent_1;
import { __decorate } from "tslib";
import { fromEvent } from 'rxjs';
import { Component, forwardRef, OnInit, ViewEncapsulation, OnDestroy, HostBinding, AfterViewInit, ElementRef, ViewChild, Renderer2 } from '@angular/core';
import { ControlValueAccessor, FormBuilder, NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { hasValue } from '../../../utils/check';
import { inArray } from '../../..//utils/array';
import { filter } from 'rxjs/operators';
let AddressColComponent = AddressColComponent_1 = class AddressColComponent {
    constructor(_fb, _renderer, _elementRef) {
        this._fb = _fb;
        this._renderer = _renderer;
        this._elementRef = _elementRef;
        this.class = true;
        this.modelForm = this._fb.group({
            via: ['', [Validators.required]],
            address1: ['', [Validators.required, Validators.maxLength(50)]],
            address2: ['', Validators.maxLength(50)],
            address3: ['', Validators.maxLength(50)]
        });
        // tslint:disable-next-line: max-line-length
        this.viaOptionsSubs = [];
        this.viaRegex = /^Autopista|Avenida Calle|Avenida Carrera|Avenida|Calle|Carrera|Circunvalar|Circular|Diagonal|Kilometro|Manzana|Transversal$/i;
        this.viaOptions = [
            'Autopista', 'Avenida', 'Avenida Calle', 'Avenida Carrera', 'Calle', 'Carrera', 'Circunvalar', 'Circular', 'Diagonal', 'Kilometro', 'Manzana', 'Transversal', 'Via'
        ];
        this.viaOptionsOriginal = [
            'Autopista', 'Avenida', 'Avenida Calle', 'Avenida Carrera', 'Calle', 'Carrera', 'Circunvalar', 'Circular', 'Diagonal', 'Kilometro', 'Manzana', 'Transversal', 'Via'
        ];
    }
    writeValue(obj) {
        if (hasValue(obj)) {
            let address1;
            let address2;
            let address3;
            obj = obj.trim().replace(/\s+/g, ' ');
            if (/(\s?-\s?)+/.test(obj)) {
                address3 = obj.split(/(\s?-\s?)+/);
                this.modelForm.get('address3').setValue(address3[address3.length - 1].trim().split(' ').map(val => val.charAt(0).toUpperCase() + val.slice(1).toLowerCase()).join(' '));
                address2 = address3[0].trim();
            }
            else {
                address2 = obj;
            }
            if (/(\s?[#]\s?)+/.test(address2)) {
                address2 = address2.split(/(\s?[#]\s?)+/);
                this.modelForm.get('address2').setValue(address2[address2.length - 1].trim().split(' ').map(val => val.charAt(0).toUpperCase() + val.slice(1).toLowerCase()).join(' '));
                address1 = address2[0].trim();
            }
            else {
                address1 = obj;
            }
            if (this.viaRegex.test(address1)) {
                address1 = address1.split(this.viaRegex);
                this.modelForm.get('address1').setValue(address1[address1.length - 1].trim().split(' ').map(val => val.charAt(0).toUpperCase() + val.slice(1).toLowerCase()).join(' '));
                setTimeout(() => {
                    this.setVia(this.viaRegex.exec(obj)[0].split(' ').map(val => val.charAt(0).toUpperCase() + val.slice(1).toLowerCase()).join(' '));
                });
            }
        }
    }
    generateValue() {
        var _a, _b, _c;
        const address = this.modelForm.get('via').value + ' ' + ((_a = this.modelForm.get('address1').value) === null || _a === void 0 ? void 0 : _a.trim().split(' ').map(val => val.charAt(0).toUpperCase() + val.slice(1).toLowerCase()).join(' ')) +
            ' # ' + ((_b = this.modelForm.get('address2').value) === null || _b === void 0 ? void 0 : _b.trim().split(' ').map(val => val.charAt(0).toUpperCase() + val.slice(1).toLowerCase()).join(' ')) +
            ' - ' + ((_c = this.modelForm.get('address3').value) === null || _c === void 0 ? void 0 : _c.trim().split(' ').map(val => val.charAt(0).toUpperCase() + val.slice(1).toLowerCase()).join(' '));
        return address;
    }
    registerOnChange(fn) {
        this.onChange = fn;
    }
    onChange(_) { }
    registerOnTouched(fn) {
        this.onTouch = fn;
    }
    onTouch() { }
    ngOnInit() {
        this.modelSub = this.modelForm.valueChanges.subscribe(() => {
            if (this.modelForm.valid) {
                this.onChange(this.generateValue());
            }
            else {
                this.onChange(null);
            }
        });
    }
    ngAfterViewInit() {
        this._renderer.removeChild(this.viaElCont.nativeElement, this.viaOptionsEl.nativeElement);
        setTimeout(() => {
            if (!hasValue(this.viaElHint.nativeElement.value)) {
                this.viaElHint.nativeElement.value = 'Calle';
            }
        });
    }
    openViaOptions() {
        this.viaOptionsSubs.push(fromEvent(window, 'click')
            .pipe(filter((e) => !this.viaElCont.nativeElement.contains(e.target)))
            .subscribe(() => {
            this.setVia(this.viaOptions[0]);
        }));
        this.viaOptionsSubs.push(fromEvent(window, 'keyup')
            .pipe(filter((e) => inArray(e.key.toLowerCase(), ['arrowright', 'escape', 'enter'])))
            .subscribe(() => {
            this.setVia(this.viaOptions[0]);
        }));
        this.filterViaOptions(this.modelForm.get('via').value);
        this.setPositionDropdown();
        this._renderer.appendChild(this.viaElCont.nativeElement, this.viaOptionsEl.nativeElement);
    }
    closeDropdown() {
        this.viaOptionsSubs.forEach(s => s.unsubscribe());
        this.viaOptionsSubs = [];
        this._renderer.removeChild(this.viaElCont.nativeElement, this.viaOptionsEl.nativeElement);
        this.address1.nativeElement.focus();
    }
    setPositionDropdown() {
        setTimeout(() => {
            const dropdown = this.viaOptionsEl.nativeElement;
            const el = this.viaEl.nativeElement;
            const remainingHeight = document.documentElement.offsetHeight - (dropdown.offsetHeight + el.getBoundingClientRect().top + el.offsetHeight);
            this._renderer.setStyle(dropdown, 'left', (el.getBoundingClientRect().left - 6) + 'px');
            if (remainingHeight > 0) {
                this._renderer.removeClass(el, 'ontop');
                this._renderer.removeClass(dropdown, 'ontop');
                this._elementRef.nativeElement.style.removeProperty('bottom');
                this._renderer.setStyle(dropdown, 'top', el.getBoundingClientRect().bottom + 'px');
            }
            else {
                this._renderer.addClass(el, 'ontop');
                this._renderer.addClass(dropdown, 'ontop');
                this._elementRef.nativeElement.style.removeProperty('top');
                this._renderer.setStyle(dropdown, 'bottom', (document.documentElement.offsetHeight - el.getBoundingClientRect().top) + 'px');
            }
        });
    }
    filterViaOptions(value) {
        var _a;
        if (hasValue(value)) {
            this.viaOptions = this.viaOptionsOriginal.filter(it => { var _a; return it.slice(0, value.length).toLowerCase() === ((_a = value) === null || _a === void 0 ? void 0 : _a.toLowerCase()); });
            if (hasValue(this.viaOptions)) {
                this.viaElHint.nativeElement.value = this.viaOptions[0];
                this.viaEl.nativeElement.value = (_a = this.viaEl.nativeElement.value) === null || _a === void 0 ? void 0 : _a.split(' ').map(val => val.charAt(0).toUpperCase() + val.slice(1).toLowerCase()).join(' ');
            }
            else {
                this.viaElHint.nativeElement.value = '';
            }
            setTimeout(() => {
                this.setPositionDropdown();
            });
        }
        else {
            this.viaOptions = this.viaOptionsOriginal;
        }
    }
    viaBlur() {
        if (!hasValue(this.modelForm.get('via').value)) {
            this.setVia(this.viaOptions[0]);
        }
    }
    setVia(value) {
        if (hasValue(value)) {
            this.modelForm.get('via').setValue(value);
            this.viaEl.nativeElement.value = value;
            this.viaElHint.nativeElement.value = value;
        }
        else {
            this.viaEl.nativeElement.value = '';
            this.viaElHint.nativeElement.value = '';
        }
        this.closeDropdown();
    }
    ngOnDestroy() {
        var _a;
        this.modelSub.unsubscribe();
        (_a = this.viaOptionsSubs) === null || _a === void 0 ? void 0 : _a.forEach(s => { var _a; return (_a = s) === null || _a === void 0 ? void 0 : _a.unsubscribe(); });
    }
};
AddressColComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: Renderer2 },
    { type: ElementRef }
];
__decorate([
    HostBinding('class.address-input')
], AddressColComponent.prototype, "class", void 0);
__decorate([
    ViewChild('viaOptionsEl')
], AddressColComponent.prototype, "viaOptionsEl", void 0);
__decorate([
    ViewChild('viaElCont')
], AddressColComponent.prototype, "viaElCont", void 0);
__decorate([
    ViewChild('viaEl')
], AddressColComponent.prototype, "viaEl", void 0);
__decorate([
    ViewChild('viaElHint')
], AddressColComponent.prototype, "viaElHint", void 0);
__decorate([
    ViewChild('address1')
], AddressColComponent.prototype, "address1", void 0);
AddressColComponent = AddressColComponent_1 = __decorate([
    Component({
        selector: 'address-col-input',
        template: "<ng-container [formGroup]=\"modelForm\">\n\n    <div class=\"via\" #viaElCont>\n        <input type=\"text\" class=\"not-styled via-input\" [size]=\"viaElHint?.value ? viaElHint?.value?.length : 1\" #viaEl (focus)=\"openViaOptions()\" (input)=\"filterViaOptions(viaEl.value)\" autocomplete=\"off\" spellcheck=\"false\" >\n        <input type=\"text\" #viaElHint class=\"not-styled hint\" [size]=\"viaElHint?.value ? viaElHint?.value?.length : 1\" />\n\n        <div class=\"via-options\" #viaOptionsEl>\n            <div class=\"via-item\" *ngFor=\"let item of viaOptions\" (click)=\"setVia(item)\">{{ item }}</div>\n        </div>\n    </div>\n\n    <input class=\"not-styled address1\" #address1 placeholder=\"\" formControlName=\"address1\"  [size]=\"address1?.value ? address1?.value?.length : 1\" />\n\n    <span class=\"separator s1\">#</span>\n\n    <input class=\"not-styled address2\" #address2 placeholder=\"\" formControlName=\"address2\"  [size]=\"address2?.value ? address2?.value?.length : 1\" />\n\n    <span class=\"separator s2\">-</span>\n\n    <input class=\"not-styled address3\" #address3 placeholder=\"\" formControlName=\"address3\"  [size]=\"address3?.value ? address3?.value?.length : 1\" />\n\n</ng-container>\n",
        providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(() => AddressColComponent_1),
                multi: true
            }
        ],
        encapsulation: ViewEncapsulation.None
    })
], AddressColComponent);
export { AddressColComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkcmVzcy1jb2wuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHNlcnNvbC9uZ3gvIiwic291cmNlcyI6WyJmb3JtL2FkZHJlc3MvYWRkcmVzcy1jb2wvYWRkcmVzcy1jb2wuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBZ0IsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFKLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEcsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFjeEMsSUFBYSxtQkFBbUIsMkJBQWhDLE1BQWEsbUJBQW1CO0lBNEI1QixZQUFvQixHQUFnQixFQUFVLFNBQW9CLEVBQVUsV0FBdUI7UUFBL0UsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUFVLGNBQVMsR0FBVCxTQUFTLENBQVc7UUFBVSxnQkFBVyxHQUFYLFdBQVcsQ0FBWTtRQTFCL0QsVUFBSyxHQUFHLElBQUksQ0FBQztRQVFqRCxjQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUM7WUFDdkIsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2hDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQy9ELFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ3hDLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRSxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQzNDLENBQUMsQ0FBQztRQUVILDRDQUE0QztRQUM1QyxtQkFBYyxHQUFtQixFQUFFLENBQUM7UUFDcEMsYUFBUSxHQUFHLDhIQUE4SCxDQUFDO1FBQzFJLGVBQVUsR0FBRztZQUNULFdBQVcsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUcsYUFBYSxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxhQUFhLEVBQUUsS0FBSztTQUN2SyxDQUFDO1FBRUYsdUJBQWtCLEdBQUc7WUFDakIsV0FBVyxFQUFFLFNBQVMsRUFBRSxlQUFlLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRyxhQUFhLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFFLGFBQWEsRUFBRSxLQUFLO1NBQ3ZLLENBQUM7SUFFcUcsQ0FBQztJQUV4RyxVQUFVLENBQUMsR0FBUTtRQUVmLElBQUksUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxRQUFhLENBQUM7WUFDbEIsSUFBSSxRQUFhLENBQUM7WUFDbEIsSUFBSSxRQUFhLENBQUM7WUFFbEIsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBRXRDLElBQUksWUFBWSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDeEIsUUFBUSxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7Z0JBQ25DLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hLLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDakM7aUJBQU07Z0JBQ0gsUUFBUSxHQUFHLEdBQUcsQ0FBQzthQUNsQjtZQUVELElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRTtnQkFDL0IsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7Z0JBQzFDLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ3hLLFFBQVEsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7YUFDakM7aUJBQU07Z0JBQ0gsUUFBUSxHQUFHLEdBQUcsQ0FBQzthQUNsQjtZQUVE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V0FBVyxLQUFFLEVBQUc7SUFDekQsQ0FBQztDQUVKLENBQUE7O1lBdEw0QixXQUFXO1lBQXFCLFNBQVM7WUFBdUIsVUFBVTs7QUExQi9EO0lBQW5DLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQztrREFBYztBQUN0QjtJQUExQixTQUFTLENBQUMsY0FBYyxDQUFDO3lEQUEwQjtBQUM1QjtJQUF2QixTQUFTLENBQUMsV0FBVyxDQUFDO3NEQUF1QjtBQUMxQjtJQUFuQixTQUFTLENBQUMsT0FBTyxDQUFDO2tEQUFtQjtBQUNkO0lBQXZCLFNBQVMsQ0FBQyxXQUFXLENBQUM7c0RBQXVCO0FBQ3ZCO0lBQXRCLFNBQVMsQ0FBQyxVQUFVLENBQUM7cURBQXNCO0FBUG5DLG1CQUFtQjtJQVovQixTQUFTLENBQUM7UUFDVCxRQUFRLEVBQUUsbUJBQW1CO1FBQzdCLGl1Q0FBMkM7UUFDM0MsU0FBUyxFQUFFO1lBQ1A7Z0JBQ0ksT0FBTyxFQUFFLGlCQUFpQjtnQkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBbUIsQ0FBQztnQkFDbEQsS0FBSyxFQUFFLElBQUk7YUFDZDtTQUNKO1FBQ0QsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7S0FDdEMsQ0FBQztHQUNXLG1CQUFtQixDQWtOL0I7U0FsTlksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZnJvbUV2ZW50LCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbXBvbmVudCwgZm9yd2FyZFJlZiwgT25Jbml0LCBWaWV3RW5jYXBzdWxhdGlvbiwgT25EZXN0cm95LCBIb3N0QmluZGluZywgQWZ0ZXJWaWV3SW5pdCwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBGb3JtQnVpbGRlciwgTkdfVkFMVUVfQUNDRVNTT1IsIFZhbGlkYXRvcnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBoYXNWYWx1ZSB9IGZyb20gJy4uLy4uLy4uL3V0aWxzL2NoZWNrJztcbmltcG9ydCB7IGluQXJyYXkgfSBmcm9tICcuLi8uLi8uLi8vdXRpbHMvYXJyYXknO1xuaW1wb3J0IHsgZmlsdGVyIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdhZGRyZXNzLWNvbC1pbnB1dCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9hZGRyZXNzLWNvbC5jb21wb25lbnQuaHRtbCcsXG4gIHByb3ZpZGVyczogW1xuICAgICAge1xuICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IEFkZHJlc3NDb2xDb21wb25lbnQpLFxuICAgICAgICAgIG11bHRpOiB0cnVlXG4gICAgICB9XG4gIF0sXG4gIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcbn0pXG5leHBvcnQgY2xhc3MgQWRkcmVzc0NvbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFkZHJlc3MtaW5wdXQnKSBjbGFzcyA9IHRydWU7XG4gICAgQFZpZXdDaGlsZCgndmlhT3B0aW9uc0VsJykgdmlhT3B0aW9uc0VsOiBFbGVtZW50UmVmO1xuICAgIEBWaWV3Q2hpbGQoJ3ZpYUVsQ29udCcpIHZpYUVsQ29udDogRWxlbWVudFJlZjtcbiAgICBAVmlld0NoaWxkKCd2aWFFbCcpIHZpYUVsOiBFbGVtZW50UmVmO1xuICAgIEBWaWV3Q2hpbGQoJ3ZpYUVsSGludCcpIHZpYUVsSGludDogRWxlbWVudFJlZjtcbiAgICBAVmlld0NoaWxkKCdhZGRyZXNzMScpIGFkZHJlc3MxOiBFbGVtZW50UmVmO1xuXG4gICAgbW9kZWxTdWI6IFN1YnNjcmlwdGlvbjtcbiAgICBtb2RlbEZvcm0gPSB0aGlzLl9mYi5ncm91cCh7XG4gICAgICAgIHZpYTogWycnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZF1dLFxuICAgICAgICBhZGRyZXNzMTogWycnLCBbVmFsaWRhdG9ycy5yZXF1aXJlZCwgVmFsaWRhdG9ycy5tYXhMZW5ndGgoNTApXV0sXG4gICAgICAgIGFkZHJlc3MyOiBbJycsIFZhbGlkYXRvcnMubWF4TGVuZ3RoKDUwKV0sXG4gICAgICAgIGFkZHJlc3MzOiBbJycsIFZhbGlkYXRvcnMubWF4TGVuZ3RoKDUwKV1cbiAgICB9KTtcblxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbWF4LWxpbmUtbGVuZ3RoXG4gICAgdmlhT3B0aW9uc1N1YnM6IFN1YnNjcmlwdGlvbltdID0gW107XG4gICAgdmlhUmVnZXggPSAvXkF1dG9waXN0YXxBdmVuaWRhIENhbGxlfEF2ZW5pZGEgQ2FycmVyYXxBdmVuaWRhfENhbGxlfENhcnJlcmF8Q2lyY3VudmFsYXJ8Q2lyY3VsYXJ8RGlhZ29uYWx8S2lsb21ldHJvfE1hbnphbmF8VHJhbnN2ZXJzYWwkL2k7XG4gICAgdmlhT3B0aW9ucyA9IFtcbiAgICAgICAgJ0F1dG9waXN0YScsICdBdmVuaWRhJywgJ0F2ZW5pZGEgQ2FsbGUnLCAnQXZlbmlkYSBDYXJyZXJhJywgJ0NhbGxlJywgJ0NhcnJlcmEnICwgJ0NpcmN1bnZhbGFyJywgJ0NpcmN1bGFyJywgJ0RpYWdvbmFsJywgJ0tpbG9tZXRybycsICdNYW56YW5hJywgJ1RyYW5zdmVyc2FsJywgJ1ZpYSdcbiAgICBdO1xuXG4gICAgdmlhT3B0aW9uc09yaWdpbmFsID0gW1xuICAgICAgICAnQXV0b3Bpc3RhJywgJ0F2ZW5pZGEnLCAnQXZlbmlkYSBDYWxsZScsICdBdmVuaWRhIENhcnJlcmEnLCAnQ2FsbGUnLCAnQ2FycmVyYScgLCAnQ2lyY3VudmFsYXInLCAnQ2lyY3VsYXInLCAnRGlhZ29uYWwnLCAnS2lsb21ldHJvJywgJ01hbnphbmEnLCAnVHJhbnN2ZXJzYWwnLCAnVmlhJ1xuICAgIF07XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9mYjogRm9ybUJ1aWxkZXIsIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIsIHByaXZhdGUgX2VsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHsgfVxuXG4gICAgd3JpdGVWYWx1ZShvYmo6IGFueSkge1xuXG4gICAgICAgIGlmIChoYXNWYWx1ZShvYmopKSB7XG4gICAgICAgICAgICBsZXQgYWRkcmVzczE6IGFueTtcbiAgICAgICAgICAgIGxldCBhZGRyZXNzMjogYW55O1xuICAgICAgICAgICAgbGV0IGFkZHJlc3MzOiBhbnk7XG5cbiAgICAgICAgICAgIG9iaiA9IG9iai50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnICcpO1xuXG4gICAgICAgICAgICBpZiAoLyhcXHM/LVxccz8pKy8udGVzdChvYmopKSB7XG4gICAgICAgICAgICAgICAgYWRkcmVzczMgPSBvYmouc3BsaXQoLyhcXHM/LVxccz8pKy8pO1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxGb3JtLmdldCgnYWRkcmVzczMnKS5zZXRWYWx1ZShhZGRyZXNzM1thZGRyZXNzMy5sZW5ndGggLSAxXS50cmltKCkuc3BsaXQoJyAnKS5tYXAodmFsID0+IHZhbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHZhbC5zbGljZSgxKS50b0xvd2VyQ2FzZSgpKS5qb2luKCcgJykpO1xuICAgICAgICAgICAgICAgIGFkZHJlc3MyID0gYWRkcmVzczNbMF0udHJpbSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzMiA9IG9iajtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKC8oXFxzP1sjXVxccz8pKy8udGVzdChhZGRyZXNzMikpIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzMiA9IGFkZHJlc3MyLnNwbGl0KC8oXFxzP1sjXVxccz8pKy8pO1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxGb3JtLmdldCgnYWRkcmVzczInKS5zZXRWYWx1ZShhZGRyZXNzMlthZGRyZXNzMi5sZW5ndGggLSAxXS50cmltKCkuc3BsaXQoJyAnKS5tYXAodmFsID0+IHZhbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHZhbC5zbGljZSgxKS50b0xvd2VyQ2FzZSgpKS5qb2luKCcgJykpO1xuICAgICAgICAgICAgICAgIGFkZHJlc3MxID0gYWRkcmVzczJbMF0udHJpbSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzMSA9IG9iajtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHRoaXMudmlhUmVnZXgudGVzdChhZGRyZXNzMSkpIHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzMSA9IGFkZHJlc3MxLnNwbGl0KHRoaXMudmlhUmVnZXgpO1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxGb3JtLmdldCgnYWRkcmVzczEnKS5zZXRWYWx1ZShhZGRyZXNzMVthZGRyZXNzMS5sZW5ndGggLSAxXS50cmltKCkuc3BsaXQoJyAnKS5tYXAodmFsID0+IHZhbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHZhbC5zbGljZSgxKS50b0xvd2VyQ2FzZSgpKS5qb2luKCcgJykpO1xuXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VmlhKHRoaXMudmlhUmVnZXguZXhlYyhvYmopWzBdLnNwbGl0KCcgJykubWFwKHZhbCA9PiB2YWwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB2YWwuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSkuam9pbignICcpKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2VuZXJhdGVWYWx1ZSgpIHtcbiAgICAgICAgY29uc3QgYWRkcmVzcyA9IHRoaXMubW9kZWxGb3JtLmdldCgndmlhJykudmFsdWUgKyAnICcgK1xuICAgICAgICB0aGlzLm1vZGVsRm9ybS5nZXQoJ2FkZHJlc3MxJykudmFsdWU/LnRyaW0oKS5zcGxpdCgnICcpLm1hcCh2YWwgPT4gdmFsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdmFsLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCkpLmpvaW4oJyAnKSArXG4gICAgICAgICcgIyAnICtcbiAgICAgICAgdGhpcy5tb2RlbEZvcm0uZ2V0KCdhZGRyZXNzMicpLnZhbHVlPy50cmltKCkuc3BsaXQoJyAnKS5tYXAodmFsID0+IHZhbC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHZhbC5zbGljZSgxKS50b0xvd2VyQ2FzZSgpKS5qb2luKCcgJykgK1xuICAgICAgICAnIC0gJyArXG4gICAgICAgIHRoaXMubW9kZWxGb3JtLmdldCgnYWRkcmVzczMnKS52YWx1ZT8udHJpbSgpLnNwbGl0KCcgJykubWFwKHZhbCA9PiB2YWwuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB2YWwuc2xpY2UoMSkudG9Mb3dlckNhc2UoKSkuam9pbignICcpO1xuXG4gICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IGFueSkge1xuICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZm47XG4gICAgfVxuICAgIG9uQ2hhbmdlKF86IGFueSkgeyB9XG5cbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KSB7XG4gICAgICAgIHRoaXMub25Ub3VjaCA9IGZuO1xuICAgIH1cbiAgICBvblRvdWNoKCkgeyB9XG5cbiAgICBuZ09uSW5pdCgpIHtcblxuICAgICAgICB0aGlzLm1vZGVsU3ViID0gdGhpcy5tb2RlbEZvcm0udmFsdWVDaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5tb2RlbEZvcm0udmFsaWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uQ2hhbmdlKHRoaXMuZ2VuZXJhdGVWYWx1ZSgpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5vbkNoYW5nZShudWxsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDaGlsZCh0aGlzLnZpYUVsQ29udC5uYXRpdmVFbGVtZW50LCB0aGlzLnZpYU9wdGlvbnNFbC5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIGlmICghaGFzVmFsdWUodGhpcy52aWFFbEhpbnQubmF0aXZlRWxlbWVudC52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpYUVsSGludC5uYXRpdmVFbGVtZW50LnZhbHVlID0gJ0NhbGxlJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHVibGljIG9wZW5WaWFPcHRpb25zKCkge1xuXG4gICAgICAgIHRoaXMudmlhT3B0aW9uc1N1YnMucHVzaChcbiAgICAgICAgICAgIGZyb21FdmVudCh3aW5kb3csICdjbGljaycpXG4gICAgICAgICAgICAucGlwZShmaWx0ZXIoKGU6IE1vdXNlRXZlbnQpID0+ICF0aGlzLnZpYUVsQ29udC5uYXRpdmVFbGVtZW50LmNvbnRhaW5zKGUudGFyZ2V0KSApKVxuICAgICAgICAgICAgLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWaWEodGhpcy52aWFPcHRpb25zWzBdKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgdGhpcy52aWFPcHRpb25zU3Vicy5wdXNoKFxuICAgICAgICAgICAgZnJvbUV2ZW50KHdpbmRvdywgJ2tleXVwJylcbiAgICAgICAgICAgIC5waXBlKGZpbHRlcigoZTogS2V5Ym9hcmRFdmVudCkgPT4gaW5BcnJheShlLmtleS50b0xvd2VyQ2FzZSgpLCBbJ2Fycm93cmlnaHQnLCAnZXNjYXBlJywgJ2VudGVyJ10pKSlcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmlhKHRoaXMudmlhT3B0aW9uc1swXSk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIHRoaXMuZmlsdGVyVmlhT3B0aW9ucyh0aGlzLm1vZGVsRm9ybS5nZXQoJ3ZpYScpLnZhbHVlKTtcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbkRyb3Bkb3duKCk7XG5cbiAgICAgICAgdGhpcy5fcmVuZGVyZXIuYXBwZW5kQ2hpbGQodGhpcy52aWFFbENvbnQubmF0aXZlRWxlbWVudCwgdGhpcy52aWFPcHRpb25zRWwubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsb3NlRHJvcGRvd24oKSB7XG4gICAgICAgIHRoaXMudmlhT3B0aW9uc1N1YnMuZm9yRWFjaChzID0+IHMudW5zdWJzY3JpYmUoKSApO1xuICAgICAgICB0aGlzLnZpYU9wdGlvbnNTdWJzID0gW107XG4gICAgICAgIHRoaXMuX3JlbmRlcmVyLnJlbW92ZUNoaWxkKHRoaXMudmlhRWxDb250Lm5hdGl2ZUVsZW1lbnQsIHRoaXMudmlhT3B0aW9uc0VsLm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgICB0aGlzLmFkZHJlc3MxLm5hdGl2ZUVsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBzZXRQb3NpdGlvbkRyb3Bkb3duKCkge1xuXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuXG4gICAgICAgICAgICBjb25zdCBkcm9wZG93biA9ICh0aGlzLnZpYU9wdGlvbnNFbC5uYXRpdmVFbGVtZW50IGFzIEhUTUxEaXZFbGVtZW50KTtcbiAgICAgICAgICAgIGNvbnN0IGVsID0gKHRoaXMudmlhRWwubmF0aXZlRWxlbWVudCBhcyBIVE1MRWxlbWVudCk7XG4gICAgICAgICAgICBjb25zdCByZW1haW5pbmdIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0IC0gKGRyb3Bkb3duLm9mZnNldEhlaWdodCArIGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCArIGVsLm9mZnNldEhlaWdodCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGRyb3Bkb3duLCAnbGVmdCcsIChlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC0gNikgKyAncHgnKTtcblxuICAgICAgICAgICAgaWYgKHJlbWFpbmluZ0hlaWdodCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDbGFzcyhlbCwgJ29udG9wJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3MoZHJvcGRvd24sICdvbnRvcCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zdHlsZS5yZW1vdmVQcm9wZXJ0eSgnYm90dG9tJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0U3R5bGUoZHJvcGRvd24sICd0b3AnLCBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gKyAncHgnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3MoZWwsICdvbnRvcCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFkZENsYXNzKGRyb3Bkb3duLCAnb250b3AnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3RvcCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldFN0eWxlKGRyb3Bkb3duLCAnYm90dG9tJywgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQgLSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3ApICsgJ3B4Jyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgZmlsdGVyVmlhT3B0aW9ucyh2YWx1ZTogc3RyaW5nKSB7XG5cbiAgICAgICAgaWYgKGhhc1ZhbHVlKHZhbHVlKSkge1xuICAgICAgICAgICAgdGhpcy52aWFPcHRpb25zID0gdGhpcy52aWFPcHRpb25zT3JpZ2luYWwuZmlsdGVyKGl0ID0+IGl0LnNsaWNlKDAsIHZhbHVlLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gdmFsdWU/LnRvTG93ZXJDYXNlKCkpO1xuXG4gICAgICAgICAgICBpZiAoaGFzVmFsdWUodGhpcy52aWFPcHRpb25zKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlhRWxIaW50Lm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLnZpYU9wdGlvbnNbMF07XG4gICAgICAgICAgICAgICAgdGhpcy52aWFFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdGhpcy52aWFFbC5uYXRpdmVFbGVtZW50LnZhbHVlPy5zcGxpdCgnICcpLm1hcCh2YWwgPT4gdmFsLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgdmFsLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCkpLmpvaW4oJyAnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aWFFbEhpbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9ICcnO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldFBvc2l0aW9uRHJvcGRvd24oKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWFPcHRpb25zID0gdGhpcy52aWFPcHRpb25zT3JpZ2luYWw7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHZpYUJsdXIoKSB7XG4gICAgICAgIGlmICghaGFzVmFsdWUodGhpcy5tb2RlbEZvcm0uZ2V0KCd2aWEnKS52YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VmlhKHRoaXMudmlhT3B0aW9uc1swXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRWaWEodmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAoaGFzVmFsdWUodmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVsRm9ybS5nZXQoJ3ZpYScpLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMudmlhRWwubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy52aWFFbEhpbnQubmF0aXZlRWxlbWVudC52YWx1ZSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy52aWFFbC5uYXRpdmVFbGVtZW50LnZhbHVlID0gJyc7XG4gICAgICAgICAgICB0aGlzLnZpYUVsSGludC5uYXRpdmVFbGVtZW50LnZhbHVlID0gJyc7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNsb3NlRHJvcGRvd24oKTtcbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5tb2RlbFN1Yi51bnN1YnNjcmliZSgpO1xuICAgICAgICB0aGlzLnZpYU9wdGlvbnNTdWJzPy5mb3JFYWNoKHMgPT4gcz8udW5zdWJzY3JpYmUoKSApO1xuICAgIH1cblxufVxuIl19